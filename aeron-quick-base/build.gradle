plugins {
    id 'java-library'
    id 'java'
}

java {
    sourceCompatibility = "$globalJdkVersion"
    toolchain { languageVersion = JavaLanguageVersion.of(globalJdkVersion) }
    withJavadocJar()
}
version = "$globalProjectVersion"

repositories {
    mavenCentral()
}

dependencies {
    api libs.aeronClient
    api libs.aeronDriver
    api libs.jsonMapping
    implementation project(':aeron-quick-annotations')
    implementation 'org.slf4j:slf4j-api:2.0.16'
    testImplementation libs.junit
    testImplementation libs.junitEngine
}

tasks.named('test', Test){
    useJUnitPlatform()
}

test.testLogging {
    events "passed", "skipped", "failed"
}

tasks.named('jar', Jar){
    manifest {
        attributes(
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor' : globalPackageVendor
        )
    }
}

tasks.register('fatJar', Jar){
    println ":::::::::::::::::::::::::::::"
    println JavaVersion.current()
    println ":::::::::::::::::::::::::::::"
    group = "fat"
    manifest {
        attributes(
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor' : globalPackageVendor
        )
    }
    archiveClassifier.set("fat")
    from(sourceSets.main.output)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn configurations.runtimeClasspath

    def runtimeLibs = []
    configurations.runtimeClasspath.filter { it.name.endsWith("jar") }.forEach { runtimeLibs << zipTree(it) }

    from({
        runtimeLibs
    })
}